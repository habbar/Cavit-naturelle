import time
start = time.time()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from moviepy.editor import ImageSequenceClip
from moviepy.video.io.bindings import mplfig_to_npimage

###################################################################################### Les paramètres du modèle #################################################################################################################

m = 100                            # Le nombre de points de la grille
D = 0.02817                        # Le coefficient de diffusion
U0 = 1                             # Température initiale sur le bord haut
tau = 1                            # Pas de temps
delta = 1                          # Pas d'espace
nu = 0.02                          # la viscosité
rho0 = 5                           # Densité initiale
chi0 = 0                           # la température initiale
v0 = 0.2                           # la vitesse initiale  
Nb_iter = 10000                    # Nombre d'itérations
omega_m = 1/(3*nu + 0.5)           # Temps de relaxation de la vitesse de Navier Stokes
omega_s = 1/(3*D + 0.5)            # Temps de relaxation de la chaleur 

# Initialisation des variables de la vitesse
rho = np.zeros((m+1, m+1), dtype=float)
rho = rho0*np.ones((m+1,m+1), dtype=float)
f = [4*rho/9, rho/9, rho/9, rho/9, rho/9, rho/36, rho/36, rho/36, rho/36]

# Initialisation de la chaleur
chi = np.zeros((m+1, m+1), dtype=float)
g = [4*chi/9, chi/9, chi/9, chi/9, chi/9, chi/36, chi/36, chi/36, chi/36]
chi[0,:] = U0

# Pour la vitesse
v1 = np.zeros((m+1, m+1), dtype=float) 
v2 = np.zeros((m+1, m+1), dtype=float) 
v1[0,:] = v0

######################################################################################## Boucle temporelle principale  ########################################################################################################


vit = np.array([[0,-1,0,1,-1,-1,1,1],[1,0,-1,0,1,-1,-1,1]]).T
######################################################################################## Boucle temporelle principale  ########################################################################################################
for _ in range(Nb_iter+1):
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
    ######################################################################################### Le premier schéma ###############################################################################################################
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#

    ########################################################################## Calcul de la fonction d'équilibre pour f #######################################################################################################
    feq = []
    for i in range(9):
        if i == 0:
            feq.append((4*rho/9)*(1-3/2*(v1**2+v2**2)))
        elif i == 1:
            feq.append((rho/9)*(1+3*v1+9/2*v1**2-3/2*(v1**2+v2**2)))
        elif i == 2:
            feq.append((rho/9)*(1+3*v2+9/2*v2**2-3/2*(v1**2+v2**2)))
        elif i == 3:
            feq.append((rho/9)*(1-3*v1+9/2*v1**2-3/2*(v1**2+v2**2)))
        elif i == 4:
            feq.append((rho/9)*(1-3*v2+9/2*v2**2-3/2*(v1**2+v2**2)))
        elif i == 5:
            feq.append((rho/36)*(1+3*(v1+v2)+9/2*(v1+v2)**2-3/2*(v1**2+v2**2)))
        elif i == 6:
            feq.append((rho/36)*(1+3*(-v1+v2)+9/2*(-v1+v2)**2-3/2*(v1**2+v2**2)))
        elif i == 7:
            feq.append((rho/36)*(1+3*(-v1-v2)+9/2*(-v1-v2)**2-3/2*(v1**2+v2**2)))
        elif i == 8:
            feq.append((rho/36)*(1+3*(v1-v2)+9/2*(v1-v2)**2-3/2*(v1**2+v2**2)))
        

    ################################################################################################### Collision #############################################################################################################
    for i in range(len(f)):
        f[i] = (1-omega_m)*f[i] + omega_m*feq[i]
    
    ######################################################################################## Streaming en shiftant les tableaux ##########################################################################################
    f[1][:,1:] = f[1][:,:-1]
    f[2][:-1,:] = f[2][1:,:]
    f[3][:,:-1] = f[3][:,1:]
    f[4][1:,:] = f[4][:-1,:]
    f[5][:-1,1:] = f[5][1:,:-1]
    f[6][:-1,:-1] = f[6][1:,1:]
    f[7][1:,:-1] = f[7][:-1,1:]
    f[8][1:,1:] = f[8][:-1,:-1]
    # En utilisant np.roll
    '''for i in range(1, len(f)):
        f[i] = np.roll(f[i], vit[i-1], axis=(0,1))'''
    
    ################################################################################################ Les conditions Bounce Back ###############################################################################################
    f[1][:,0], f[5][:,0], f[8][:,0] = f[3][:,0], f[7][:,0], f[6][:,0]       # bord gauche
    f[3][:,-1], f[6][:,-1], f[7][:,-1] = f[1][:,-1], f[8][:,-1], f[5][:,-1]       # bord droit
    f[2][-1,:], f[5][-1,:], f[6][-1,:] = f[4][-1,:], f[7][-1,:], f[8][-1,:]       # bord bas

    #################################################################################### Les conditions de Zhu et He pour le bord haut ########################################################################################
    rho[0,:] = f[0][0,:] + f[1][0,:] + f[3][0,:] + 2*(f[2][0,:] + f[5][0,:] + f[6][0,:])
    f[4][0,:] = f[2][0,:] 
    f[7][0,:] = f[5][0,:] - rho[0,:]*v0/6
    f[8][0,:] = f[6][0,:] + rho[0,:]*v0/6
    
    ############################################################################################## Les données pour l'équilibre ##############################################################################################
    rho = f[0] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8]
    v1 = (f[1] - f[3] + f[5] - f[6] - f[7] + f[8])/rho 
    v2 = (f[2] - f[4] + f[5] + f[6] - f[7] - f[8])/rho
    
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
    ######################################################################################### Le deuxième schéma ############################################################################################################
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#
    ###################################################################################### Calcul de la fonction d'équilibre pour g #########################################################################################
    geq = []
    for i in range(9):
        if i == 0:
            geq.append((4*chi/9))
        elif i == 1:
            geq.append((chi/9)*(1+3*v1))
        elif i == 2:
            geq.append((chi/9)*(1+3*v2))
        elif i == 3:
            geq.append((chi/9)*(1-3*v1))
        elif i == 4:
            geq.append((chi/9)*(1-3*v2))
        elif i == 5:
            geq.append((chi/36)*(1+3*(v1+v2)))
        elif i == 6:
            geq.append((chi/36)*(1+3*(-v1+v2)))
        elif i == 7:
            geq.append((chi/36)*(1-3*(v1+v2)))
        elif i == 8:
            geq.append((chi/36)*(1+3*(v1-v2)))

    ################################################################################################ Collision #############################################################################################################
    for i in range(len(g)):
        g[i] = (1-omega_s)*g[i] + omega_s*geq[i]

    ########################################################################################### Streaming en shiftant les tableaux #########################################################################################
    g[1][:,1:] = g[1][:,:-1]
    g[2][:-1,:] = g[2][1:,:]
    g[3][:,:-1] = g[3][:,1:]
    g[4][1:,:] = g[4][:-1,:]
    g[5][:-1,1:] = g[5][1:,:-1]
    g[6][:-1,:-1] = g[6][1:,1:]
    g[7][1:,:-1] = g[7][:-1,1:]
    g[8][1:,1:] = g[8][:-1,:-1]
    # En utilisant np.roll
    '''for i in range(1, len(f)):
        g[i] = np.roll(g[i], vit[i-1], axis=(0,1))'''


    ################################################################################################## Conditions aux bords ################################################################################################
    # bord gauche
    for i in [0, 1, 2, 5, 8]:
        if i == 0:
            g[i][1:,0] = 0
        elif i == 8:
            g[i][1:,0] = -g[i-2][1:,0]
        else:
            g[i][1:,0] = -g[i+2][1:,0]
    
    # bord droit 
    for i in [0, 2, 3, 6, 7]:
        if i == 0:
            g[i][1:,-1] = 0
        elif i == 2 or i == 6:
            g[i][1:,-1] = -g[i+2][1:,-1]
        else:
            g[i][1:,-1] = -g[i-2][1:,-1]

    # bord haut
    for i in range(0, m+1):
        g[8][0,i] = U0/36 + U0/36 - g[6][0,i]
        g[7][0,i] = U0/36 + U0/36 - g[5][0,i]
        g[4][0,i] = U0/9 + U0/9 - g[2][0,i]
        g[1][0,i]= U0/9 + U0/9 - g[3][0,i]
        chi[0,i] = U0

    # bord bas Neumann    
    for i in range(1, len(g)):
        g[i][-1,:] = g[i][-2,:]

    ############################################################################################## Les données pour l'équilibre ##############################################################################################
    chi = g[0] + g[1] + g[2] + g[3] + g[4] + g[5] + g[6] + g[7] + g[8]

    X = np.arange(m)
    X, Y = np.meshgrid(X, X)
    # Stockage des frames
    frames = []
    if _%100 == 0:
        plt.clf()
        plt.imshow(chi, cmap='hot', interpolation='nearest')
        plt.colorbar()
        #plt.streamplot(X, Y, v1[X,Y].T, -v2[X,Y].T, color='k', density=1.3)  # Pour les streamplot
        plt.xlabel(r"$x$")
        plt.ylabel(r"$y$")
        plt.title('Cavité entrainée chaufée')
        plt.pause(0.01)
        frames.append(mplfig_to_npimage(plt.gcf()))

# Création de la vidéo
clip = ImageSequenceClip(frames, fps=10)
clip.write_videofile("video.mp4", fps=10)
clip.save_videofile("video.mp4", fps=10)
